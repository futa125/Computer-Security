Opis rada sustava:

init:
- Uzima master password koji je predan kao argument
- Koristi taj master password i random generiranih 32 byteova (salt) kako bi pomoću 'scrypt' funkcije derivirao ključ
    - Derivirani ključ nikad se ne sprema na disk
    - Korišteni salt se sprema na disk
- HMAC funkciji predaju se derivirani ključ kao 'secret' i novih random generiranih 32 byteova kao 'message'
    - Kao rezultat dobije se HMAC tag koji se zajedno s message-om sprema u datoteku
- Kreira novu JSON datoteku koja u sebi sadrži 4 polja: verification_hmac, verification_hmac_msg, kdf_salt, passwords
- Kao rezultat vraća SHA256 hash od JSON datoteke

put:
- Uzima master password, site address i site password koji su predani kao argumenti
- Kao opcionalni argument se može predati SHA256 hash vraćen tijekom zadnje 'put' ili 'init' operacije
    - Prije rada s datotekom provjerava se poklapa li se SHA256 argument s pravim SHA256 hash-om od datoteke koji je izračunat u tom trenutku
    - Ako se ne poklapaju predani hash i izračunati hash detektiran je 'Rollback attack'
- Pomoću master passworda koji je predan kao argument i KDF salta koji se nalazi u datoteci derivira se ključ
- Pomoću deriviranog ključa i 'verification_hmac_msg' koji se nalazi u datoteci izračuna se novi HMAC tag
    - Ako se izračunati HMAC tag ne poklapa s onim prisutnim u datoteci znači da je unesen krivi master password
- Pomoću deriviranog ključa i argumenta site address izračuna se novi HMAC tag koji služi za spremanje imena web stranice
- Uzima se site password argument i dodaje se padding sa NULL byteovima kako bi zapis imao 256 byteova
    - Ovime se osigurava da se iz zapisa ne može saznati duljina lozinka
- Spoji se HMAC tag od web adrese i site password s paddingom u jedan string
    - Spojeni string se enkriptira pomoću AES256 u GCM modu rada
    - Kao rezultat enkripcije dobivamo ciphertext, tag i nonce
- U JSON datoteku spremamo site address HMAC tag kao 'key' i spojeni string ostalih vrijednosti (ciphertext + tag + nonce) kao 'value'
    - ciphertext, tag i nonce budu uvijek imali fiksnu duljinu
        # ciphertext - 288 bytes = site_address_hmac - 32 bytes + site_password_padded - 256 bytes
        # tag - 16 bytes
        # nonce - 16 bytes
        # total 320
- Kao rezultat vraćamo novo izračunati SHA256 hash od JSON datoteke

get:
- Uzima master password, site address koji su predani kao argumenti
- Kao opcionalni argument se može predati SHA256 hash vraćen tijekom zadnje 'put' ili 'init' operacije
    - Prije rada s datotekom provjerava se poklapa li se SHA256 argument s pravim SHA256 hash-om od datoteke koji je izračunat u tom trenutku
    - Ako se ne poklapaju predani hash i izračunati hash detektiran je 'Rollback attack'
- Pomoću master passworda koji je predan kao argument i KDF salta koji se nalazi u datoteci derivira se ključ
- Pomoću deriviranog ključa i 'verification_hmac_msg' koji se nalazi u datoteci izračuna se novi HMAC tag
    - Ako se izračunati HMAC tag ne poklapa s onim prisutnim u datoteci znači da je unesen krivi master password
- Pomoću deriviranog ključa i argumenta site address izračuna se novi HMAC tag koji služi za verifikaciju imena web stranice
- Pomoću taga, noncea i deriviranog ključa radimo dekripciju ciphertexta
    - Ciphertext u sebi sadrži HMAC tag web adrese
        - Ako se ne poklapa HMAC tag prisutan u dekriptiranom ciphertextu i onaj izračunat za predani site address argument, detektiran je 'Swap attack'
- Ako smo uspješno obavili dekripciju uzimamo dio ciphertexta koji sadrži lozinku i uklanjamo padding NULL byteova
- Kao rezultat vraćamo plaintext lozinku


Sigurnosni zahtjevi:
1. Povjerljivost zaporki:
    - Napadač ne može odrediti nikakve informacije o zaporkama
        - Duljina - lozinkama je uvijek dodan padding pa je duljina enkriptiranog teksta uvijek ista
        - Jesu li dvije zaporke iste - svaka lozinka tijekom AES enkripcije koristi random generirani nonce,
                                       ovime se osigurava da ista lozinka za istu stranicu za svaki novi zapis daje različiti ciphertext
        - Je li nova zaporka jednaka staroj - isti razlog kao i prijašnji

2. Povjerljivost adresa:
    - Napadač ne može odrediti nikakve informacije o adresama
        - Duljina - HMAC tag je uvijek iste duljine (32 byteova)
        - Ime adrese - svaka adresa koristi derivirani ključ za izračun HMAC taga,
                       ovime se osigurava da je potreban master password kako bi saznali koji zapis odgovara kojoj web adresi

3. Integritet adresa i zaporki:
    - Nije moguće da korisnik dobije od alata zaporku za određenu adresu, ako prethodno nije unio točno tu zaporku za točno tu adresu
        - Napad zamjene
            - Tijekom AES enkripcije se enkriptira string koji sadrži HMAC tag od web stranice zajedno sa zaporkom
                - Na ovaj način tijekom dekripcije možemo usporediti spremljeni HMAC tag s izračunatim
                - Ako se razlikuju znamo da je došlo do napada zamjene

Za one koji žele znati više:
1. Oblikujte alat tako da može baratati s jako puno zaporki:
    - Svaka zaporka je zasebno ekriptirana i svaka web adresa ima vlastiti HMAC tag
    - U niti jednom trenutku ne radimo enkripciju cijele datoteke
    - Lookup time za bilo koju web adresu je konstantan premda su adrese i lozinke spremljene kao key-value parovi
    - Dio koji bi mogao usporiti alat ako imamo više zaporki je izračun SHA256 hasha tijekom 'put' operacije:
        - Izračun hash-a je sporiji čim je datoteka veća.
        - U prosjeku svaka nova lozinka poveća veličinu datoteke za 0.7KB, a za datoteku od 1GB je potrebno oko 4 sekunde za izračun SHA256 hasha
            - Ovo omogućuje spremanje okvirno 1.4 Mil lozinka prije nego što datoteka dosegne 1GB
            - Rekao bih da je to dovoljno za prosječnog korisnika :)

2. Obrana protiv napada vraćanja stare verzije:
    - Tijekom svake 'put' ili 'init' operacije vraćamo natrag izračunati SHA256 hash
    - Taj isti hash se može predati na sljedećim 'get' ili 'put' operacijama kako bi se usporedio s novo izračunatim
    - Ako se ne poklapaju znamo da je došlo do promjena u datoteci koje mi nismo izveli
    - Također možemo negdje spremiti popis svih tih SHA256 hasheva (eksterno, ne na istome disku)
      kako bismo znali na točno koju verziju je vraćena datoteka
